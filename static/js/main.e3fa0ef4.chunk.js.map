{"version":3,"sources":["models/Address.js","models/Inscription.js","models/Interment.js","components/TitleCase.js","components/AddressDisplay.js","components/LongTextBlock.js","components/InscriptionDisplay.js","components/SelectColumnFilter.js","components/TextFilter.js","components/DateCellFormatter.js","components/PhotoDisplay.js","components/PhotoList.js","components/NameDisplay.js","components/DiedDateDisplay.js","components/InfoDisplay.js","components/GraveyardTypeDisplay.js","components/DemarcationDisplay.js","components/FootstoneDisplay.js","components/NotesDisplay.js","components/ParcelNumberDisplay.js","components/PaginatedTable.js","models/IntermentSort.js","models/Column.js","components/IntermentList.js","components/ColumnOption.js","components/ColumnGroupOptions.js","models/LocalStorage.js","components/Settings.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Address","props","this","locale","mappedLocation","mapped_location","latitude","longitude","geocode","additionalLocationInfo","additional_location_information","street","number","streetAddress","filter","info","trim","length","map","join","part","Inscription","text","lines","split","line","parseDateString","str","date","match","month","parseInt","day","year","Date","parseMonthDayYearString","parseYearMonthDayString","extractPhotos","photoAttrs","attr","photoData","Interment","key","Math","random","toString","substr","person","interment","archaeologicalInfo","archaeological_information","address","cemeteryParcelNumber","cemetery_parcel_number","tractParcelNumber","tract_parcel_number","siteContactInfo","site_contact_info","siteHistory","site_history","restoration","notes","graveyardType","lowercase","toLowerCase","parseGraveyardType","graveyard_type","currentSurvey","current_survey","surveyUpdates","survey_update_s","originalSurvey","original_survey","deceasedInfo","deceased_info","footstone","deathDate","death_date","inscription","gravePhotos","knownBurials","known_burials","sitePhotos","accessible","parseAccessible","demarcation","condition","mapID","map_id","alternateCemeteryName","alternate_cemetery_name","cemeteryName","cemetery_name","titleCase","word","replace","toUpperCase","TitleCase","value","Text","AddressLines","Box","textAlign","minWidth","AddressDisplay","ConstrainedTextBlock","styled","attrs","as","LongTextBlock","InscriptionLines","InscriptionDisplay","FullWidthDropdown","Dropdown","FullWidthDropdownButton","Button","ConstrainedDropdownMenu","Menu","SmallDropdownItem","Item","px","SelectColumnFilter","column","filterValue","setFilter","preFilteredRows","id","options","React","useMemo","Set","forEach","row","option","values","replaceAll","add","sortedOptions","sort","variant","direction","onClick","i","TextFilter","TextInput","onChange","e","target","undefined","placeholder","bg","prettyDateStr","getFullYear","getMonth","getDate","DateCellFormatter","whiteSpace","PhotoDisplay","url","description","href","rel","PhotoList","photo","NameDisplay","DiedDateDisplay","InfoDisplay","GraveyardTypeDisplay","DemarcationDisplay","FootstoneDisplay","NotesDisplay","ParcelNumberDisplay","TableHeaderCell","p","borderBottom","TableCell","verticalAlign","TableStyles","div","fuzzyTextFilterFn","rows","matchSorter","keys","autoRemove","val","PaginatedTable","columns","data","pageSize","defaultColumn","filterTypes","fuzzyText","useTable","initialState","useFilters","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","pageOptions","pageIndex","state","gotoPage","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","mt","canFilter","getRowProps","cells","cell","getCellProps","Pagination","pageCount","currentPage","onPageChange","preventDefault","normalizePerson","toLocaleLowerCase","IntermentSort","a","b","cemeteryA","cemeteryB","localeCompare","cemeterySort","personA","personB","personSort","Column","defaultColumns","all","names","groups","filterColumns","enabledColumnNames","relevantColumns","includes","accessor","IntermentList","enabledColumns","interments","NashvilleCemeteries","Filter","nameColumn","Header","Cell","deathDateColumn","deceasedInfoColumn","personColumnGroup","cemeteryColumn","addressColumn","graveyardTypeColumn","siteHistoryColumn","locationColumnGroup","inscriptionColumn","footstoneColumn","demarcationColumn","conditionColumn","accessibleColumn","restorationColumn","photosColumn","markerColumnGroup","notesColumn","otherColumnGroup","tractParcelNumberColumn","cemeteryParcelNumberColumn","parcelNumberColumnGroup","originalSurveyColumn","surveyUpdatesColumn","currentSurveyColumn","surveyColumnGroup","ColumnOption","name","isEnabled","onToggle","domID","FormGroup","display","my","mr","Label","fontWeight","htmlFor","mb","type","checked","ml","ColumnGroupOptions","groupName","columnValues","onColumnToggle","Heading","fontSize","localStorageKey","LocalStorage","window","localStorage","console","error","appData","getItem","JSON","parse","getJSON","setItem","stringify","Settings","setEnabledColumns","useState","isOpen","setIsOpen","ButtonInvisible","title","StyledOcticon","icon","GearIcon","size","color","Dialog","onDismiss","sx","overflow","maxHeight","Object","columnValue","newEnabledColumns","c","getEnabledColumns","set","Footer","borderTopWidth","borderColor","borderTopStyle","alignItems","justifyContent","Link","muted","App","savedEnabledColumns","get","ThemeProvider","BaseStyles","full","pb","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3fa0ef4.chunk.js","sourcesContent":["class Address {\n  constructor(props) {\n    this.locale = props.locale || '';\n    this.mappedLocation = props.mapped_location || '';\n    this.latitude = props.latitude;\n    this.longitude = props.longitude;\n    if (this.latitude && this.longitude) {\n      this.geocode = `${this.latitude}, ${this.longitude}`;\n    } else {\n      this.geocode = '';\n    }\n    this.additionalLocationInfo = props.additional_location_information || '';\n    this.street = props.street || '';\n    this.number = props.number || '';\n    this.streetAddress = [this.number, this.street].filter(info => info.trim().length > 0)\n      .map(info => info.trim()).join(' ');\n  }\n\n  toString() {\n    const parts = [this.locale, this.geocode, this.additionalLocationInfo, this.streetAddress];\n    return parts.filter(part => part.trim().length > 0).join(' ');\n  }\n}\n\nexport default Address;\n","class Inscription {\n  constructor(text) {\n    this.text = text || '';\n    this.lines = this.text.split(/\\s*\\/\\s*/).filter(line => line.trim().length > 0);\n  }\n}\n\nexport default Inscription;\n","import Address from './Address';\nimport Inscription from './Inscription';\n\nconst parseAccessible = accessible => {\n  const lowercase = (accessible || '').toLowerCase();\n  if (lowercase === 'yes' || lowercase === 'y') {\n    return 'yes';\n  }\n  if (lowercase === 'no' || lowercase === 'n') {\n    return 'no';\n  }\n  return lowercase;\n};\n\nconst parseMonthDayYearString = str => {\n  const regex = /^(\\d\\d?)\\/(\\d\\d?)\\/(\\d\\d\\d\\d)$/;\n  const match = str.match(regex);\n\n  if (match) {\n    const month = parseInt(match[1], 10);\n    const day = parseInt(match[2], 10);\n    const year = parseInt(match[3], 10);\n    return new Date(year, month - 1, day);\n  }\n\n  return null;\n}\n\nconst parseYearMonthDayString = str => {\n  const regex = /^(\\d\\d\\d\\d)-(\\d\\d?)-(\\d\\d?)/;\n  const match = str.match(regex);\n\n  if (match) {\n    const year = parseInt(match[1], 10);\n    const month = parseInt(match[2], 10);\n    const day = parseInt(match[3], 10);\n    return new Date(year, month - 1, day);\n  }\n\n  return null;\n};\n\nconst parseDateString = str => {\n  if (typeof str !== 'string' || str.trim().length < 1) {\n    return null;\n  }\n\n  let date = parseMonthDayYearString(str.trim());\n  if (date) {\n    return date;\n  }\n\n  date = parseYearMonthDayString(str.trim());\n  if (date) {\n    return date;\n  }\n\n  return str;\n};\n\nconst parseGraveyardType = graveyardType => {\n  const lowercase = (graveyardType || '').toLowerCase();\n  if (lowercase.match(/\\s+graveyard$/)) {\n    return lowercase.split(/\\s+/)[0];\n  }\n  return lowercase;\n}\n\nconst extractPhotos = (props, photoAttrs) => {\n  return photoAttrs.map(attr => props[attr]).filter(photoData => photoData);\n};\n\nclass Interment {\n  constructor(props) {\n    this.key = '_' + Math.random().toString(36).substr(2, 9);\n    this.person = props.interment;\n    this.archaeologicalInfo = props.archaeological_information;\n    this.address = new Address(props);\n    this.cemeteryParcelNumber = props.cemetery_parcel_number;\n    this.tractParcelNumber = props.tract_parcel_number;\n    this.siteContactInfo = props.site_contact_info;\n    this.siteHistory = props.site_history;\n    this.restoration = props.restoration;\n    this.notes = props.notes;\n    this.graveyardType = parseGraveyardType(props.graveyard_type);\n    this.currentSurvey = parseDateString(props.current_survey);\n    this.surveyUpdates = parseDateString(props.survey_update_s);\n    this.originalSurvey = parseDateString(props.original_survey);\n    this.deceasedInfo = props.deceased_info;\n    this.footstone = props.footstone;\n    this.deathDate = parseDateString(props.death_date);\n    this.inscription = new Inscription(props.inscription);\n    this.gravePhotos = extractPhotos(props, ['grave_photo_link', 'grave_photo_2', 'grave_photo_3']);\n    this.knownBurials = props.known_burials;\n    this.sitePhotos = extractPhotos(props, ['site_photo_link', 'site_photo_2', 'site_photo_3', 'site_photo_4',\n      'site_photo_5', 'site_photo_6']);\n    this.accessible = parseAccessible(props.accessible);\n    this.demarcation = props.demarcation;\n    this.condition = props.condition;\n    this.mapID = props.map_id;\n    this.alternateCemeteryName = props.alternate_cemetery_name;\n    this.cemeteryName = props.cemetery_name;\n    if (!this.cemeteryName || (typeof this.cemeteryName === 'string' && this.cemeteryName.length < 0)) {\n      if (typeof this.alternateCemeteryName === 'string' && this.alternateCemeteryName.length > 0) {\n        this.cemeteryName = this.alternateCemeteryName;\n      }\n    }\n  }\n}\n\nexport default Interment;\n","import React from 'react';\nimport { Text } from '@primer/components';\n\nexport const titleCase = str => str.toLowerCase().split(/\\s+/)\n  .filter(word => word.length > 0)\n  .map(word => word.replace(word[0], word[0].toUpperCase())).join(' ');\n\nconst TitleCase = ({ value }) => typeof value === 'string' ? <Text>{titleCase(value)}</Text> : null;\n\nexport default TitleCase;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport TitleCase from './TitleCase';\n\nconst AddressLines = ({ streetAddress, additionalLocationInfo }) => <Box textAlign=\"left\" minWidth=\"200px\">\n  <TitleCase value={streetAddress} />\n  {typeof additionalLocationInfo === 'string' && additionalLocationInfo.length > 0 ? (\n    <Box>\n      <TitleCase value={additionalLocationInfo} />\n    </Box>\n  ) : null}\n</Box>;\n\nconst AddressDisplay = ({ value }) => <AddressLines {...value} />;\n\nexport default AddressDisplay;\n","import React from 'react';\nimport { Text } from '@primer/components';\nimport styled from \"styled-components\";\nimport { titleCase } from './TitleCase';\n\nexport const ConstrainedTextBlock = styled(Text).attrs({\n  as: 'div'\n})`\n  max-height: 7.5em;\n  overflow: auto;\n`;\n\nconst LongTextBlock = ({ value }) => typeof value === 'string' ? (\n  <ConstrainedTextBlock>{titleCase(value)}</ConstrainedTextBlock>\n) : null;\n\nexport default LongTextBlock;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport { ConstrainedTextBlock } from './LongTextBlock';\nimport { titleCase } from './TitleCase';\n\nconst InscriptionLines = ({ text, lines }) => <ConstrainedTextBlock textAlign=\"center\">\n  {lines.length > 0 ? (\n    <>\n      {lines.map(line => {\n        const key = '_' + Math.random().toString(36).substr(2, 9);\n        return (\n          <div key={key}>{titleCase(line)}</div>\n        );\n      })}\n    </>\n  ) : text}\n</ConstrainedTextBlock>;\n\nconst InscriptionDisplay = ({ value }) => <Box minWidth=\"200px\"><InscriptionLines {...value} /></Box>;\n\nexport default InscriptionDisplay;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Dropdown } from '@primer/components';\nimport { titleCase } from './TitleCase';\n\nconst FullWidthDropdown = styled(Dropdown)`\n  width: 100%;\n`;\n\nconst FullWidthDropdownButton = styled(Dropdown.Button)`\n  width: 100%;\n`;\n\nconst ConstrainedDropdownMenu = styled(Dropdown.Menu)`\n  width: 100%;\n  max-height: 50vh;\n  overflow: auto;\n  text-align: left;\n  font-weight: normal;\n`;\n\nconst SmallDropdownItem = styled(Dropdown.Item).attrs({\n  px: 2\n})`\n  font-size: 0.9rem;\n`;\n\nfunction SelectColumnFilter({\n  column: {filterValue, setFilter, preFilteredRows, id}\n}) {\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach(row => {\n      const value = row.values[id] || '';\n      const option = value.replaceAll(/\\s+/g, ' ');\n      if (option.length > 0 && option !== ' ') {\n        options.add(option);\n      }\n    })\n    const sortedOptions = [...options.values()];\n    sortedOptions.sort();\n    return sortedOptions;\n  }, [id, preFilteredRows]);\n\n  return (\n    <FullWidthDropdown>\n      <FullWidthDropdownButton variant=\"small\">{filterValue ? titleCase(filterValue) : \"All\"}</FullWidthDropdownButton>\n      <ConstrainedDropdownMenu direction=\"s\">\n        <SmallDropdownItem onClick={() => setFilter(\"\")}>All</SmallDropdownItem>\n        {options.map((option, i) => (\n          <SmallDropdownItem key={i} onClick={() => setFilter(option)}>{titleCase(option)}</SmallDropdownItem>\n        ))}\n      </ConstrainedDropdownMenu>\n    </FullWidthDropdown>\n  )\n}\n\nexport default SelectColumnFilter;\n","import React from 'react';\nimport { TextInput } from '@primer/components';\n\nfunction TextFilter({\n  column: {filterValue, setFilter}\n}) {\n  return (\n    <TextInput\n      value={filterValue || ''}\n      onChange={e => setFilter(e.target.value || undefined)}\n      placeholder=\"Filter\"\n      bg=\"white\"\n      variant=\"small\"\n    />\n  );\n}\n\nexport default TextFilter;\n","import React from 'react';\nimport { Box, Text } from '@primer/components';\n\nconst prettyDateStr = (date) => {\n  const year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  if (month < 10) {\n    month = `0${month}`;\n  }\n  let day = date.getDate();\n  if (day < 10) {\n    day = `0${day}`;\n  }\n  return `${year}-${month}-${day}`;\n};\n\nconst DateCellFormatter = ({ value }) => <Box minWidth=\"130px\">\n  {value instanceof Date ? <Text whiteSpace=\"nowrap\">{prettyDateStr(value)}</Text> : value}\n</Box>;\n\nexport default DateCellFormatter;\n","import React from 'react';\n\nconst PhotoDisplay = ({ url, description }) => {\n  return (\n    <div>\n      {url && description ? (\n        <a\n          href={url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >{description}</a>\n      ) : (\n        <span>{url}</span>\n      )}\n    </div>\n  );\n};\n\nexport default PhotoDisplay;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport PhotoDisplay from './PhotoDisplay';\n\nconst PhotoList = ({ value }) => <Box minWidth=\"120px\">\n  {value.map(photo => {return <PhotoDisplay {...photo} key={photo.url} />})}\n</Box>;\n\nexport default PhotoList;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport TitleCase from './TitleCase';\n\nconst NameDisplay = ({ value }) => <Box minWidth=\"200px\"><TitleCase value={value} /></Box>;\n\nexport default NameDisplay;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport DateCellFormatter from './DateCellFormatter';\n\nconst DiedDateDisplay = ({ value }) => <Box minWidth=\"130px\"><DateCellFormatter value={value} /></Box>;\n\nexport default DiedDateDisplay;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport LongTextBlock from './LongTextBlock';\n\nconst InfoDisplay = ({ value }) => <Box minWidth=\"180px\" textAlign=\"left\">\n  <LongTextBlock value={value} />\n</Box>;\n\nexport default InfoDisplay;\n","import React from 'react';\nimport { Box, Text } from '@primer/components';\n\nconst GraveyardTypeDisplay = ({ value }) => <Box minWidth=\"130px\">\n  <Text textAlign=\"center\" as=\"div\">{value}</Text>\n</Box>;\n\nexport default GraveyardTypeDisplay;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport TitleCase from './TitleCase';\n\nconst DemarcationDisplay = ({ value }) => <Box minWidth=\"140px\"><TitleCase value={value} /></Box>;\n\nexport default DemarcationDisplay;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport LongTextBlock from './LongTextBlock';\n\nconst FootstoneDisplay = ({ value }) => <Box minWidth=\"150px\"><LongTextBlock value={value} /></Box>;\n\nexport default FootstoneDisplay;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport LongTextBlock from './LongTextBlock';\n\nconst NotesDisplay = ({ value }) => <Box minWidth=\"300px\" textAlign=\"left\">\n  <LongTextBlock value={value} />\n</Box>;\n\nexport default NotesDisplay;\n","import React from 'react';\nimport { Box } from '@primer/components';\nimport TitleCase from './TitleCase';\n\nconst ParcelNumberDisplay = ({ value }) => <Box minWidth=\"150px\"><TitleCase value={value} /></Box>;\n\nexport default ParcelNumberDisplay;\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { Box, Pagination } from '@primer/components';\nimport { useFilters, useTable, usePagination } from 'react-table';\nimport { matchSorter } from 'match-sorter';\n\nconst TableHeaderCell = styled(Box).attrs({\n  as: 'th',\n  p: 2,\n  borderBottom: '1px solid #e5e5e5'\n})`\n  background-color: #f5f5f5;\n`;\n\nconst TableCell = styled(Box).attrs({\n  as: 'td',\n  p: 2,\n  verticalAlign: 'top',\n  textAlign: 'center',\n  borderBottom: '1px solid #e5e5e5'\n})`\n`;\n\nconst TableStyles = styled.div`\n  width: 100%;\n  overflow-x: auto;\n\n  tr:nth-child(even) {\n    background-color: #f5f5f5;\n  }\n`;\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] });\n}\nfuzzyTextFilterFn.autoRemove = val => !val;\n\nconst PaginatedTable = ({ columns, data, pageSize, defaultColumn }) => {\n  const filterTypes = useMemo(() => ({ fuzzyText: fuzzyTextFilterFn }), []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    pageOptions,\n    state: {pageIndex},\n    gotoPage\n  } = useTable({\n    columns,\n    data,\n    initialState: { pageSize },\n    defaultColumn,\n    filterTypes\n  }, useFilters, usePagination);\n\n  return (\n    <>\n      <TableStyles>\n        <table {...getTableProps()}>\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  <TableHeaderCell {...column.getHeaderProps()}>\n                    {column.render('Header')}\n                    <Box mt=\"1\">{column.canFilter ? column.render('Filter') : null}</Box>\n                  </TableHeaderCell>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {page.map(row => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>)}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </TableStyles>\n      <Pagination\n        pageCount={pageOptions.length}\n        currentPage={pageIndex + 1}\n        onPageChange={(e, page) => {\n          e.preventDefault();\n          gotoPage(page - 1);\n        }}\n      />\n    </>\n  );\n};\n\nexport default PaginatedTable;\n","const cemeterySort = (a, b) => {\n  const cemeteryA = a.cemeteryName;\n  const cemeteryB = b.cemeteryName;\n  return cemeteryA.localeCompare(cemeteryB);\n};\n\nconst normalizePerson = person => {\n  return (person || '').toLocaleLowerCase().replace(/[()]/g, '');\n};\n\nconst personSort = (a, b) => {\n  const personA = normalizePerson(a.person);\n  const personB = normalizePerson(b.person);\n  if (personA && !personB) {\n    return -1;\n  }\n  if (!personA && personB) {\n    return 1;\n  }\n  if (!personA && !personB) {\n    return 0;\n  }\n  return personA.localeCompare(personB);\n};\n\nconst IntermentSort = (a, b) => {\n  return cemeterySort(a, b) || personSort(a, b);\n};\n\nexport default IntermentSort;\n","class Column {\n  static all = [\n    'person',\n    'deathDate',\n    'deceasedInfo',\n    'cemeteryName',\n    'address',\n    'graveyardType',\n    'siteHistory',\n    'inscription',\n    'footstone',\n    'demarcation',\n    'condition',\n    'accessible',\n    'restoration',\n    'gravePhotos',\n    'notes',\n    'tractParcelNumber',\n    'cemeteryParcelNumber',\n    'originalSurvey',\n    'surveyUpdates',\n    'currentSurvey'\n  ];\n  static defaultColumns = Column.all;\n  static names = {\n    'person': 'Name',\n    'deathDate': 'Died',\n    'deceasedInfo': 'Info',\n    'cemeteryName': 'Cemetery',\n    'address': 'Address',\n    'graveyardType': 'Graveyard Type',\n    'siteHistory': 'Site History',\n    'inscription': 'Inscription',\n    'footstone': 'Footstone',\n    'demarcation': 'Demarcation',\n    'condition': 'Condition',\n    'accessible': 'Accessible',\n    'restoration': 'Restoration',\n    'gravePhotos': 'Photos',\n    'notes': 'Notes',\n    'tractParcelNumber': 'Tract',\n    'cemeteryParcelNumber': 'Cemetery',\n    'originalSurvey': 'Original',\n    'surveyUpdates': 'Updates',\n    'currentSurvey': 'Current'\n  };\n  static groups = {\n    'Person': ['person', 'deathDate', 'deceasedInfo'],\n    'Location': ['cemeteryName', 'address', 'graveyardType', 'siteHistory'],\n    'Marker/Plot': ['inscription', 'footstone', 'demarcation', 'condition', 'accessible', 'restoration',\n      'gravePhotos'],\n    'Parcel Numbers': ['tractParcelNumber', 'cemeteryParcelNumber'],\n    'Survey': ['originalSurvey', 'surveyUpdates', 'currentSurvey'],\n    'Other': ['notes']\n  };\n}\n\nexport default Column;\n","import React, { useMemo } from 'react';\nimport NashvilleCemeteries from '../nashville-cemeteries.json';\nimport Interment from '../models/Interment';\nimport AddressDisplay from './AddressDisplay';\nimport InscriptionDisplay from './InscriptionDisplay';\nimport LongTextBlock from './LongTextBlock';\nimport SelectColumnFilter from './SelectColumnFilter';\nimport TextFilter from './TextFilter';\nimport DateCellFormatter from './DateCellFormatter';\nimport PhotoList from './PhotoList';\nimport NameDisplay from './NameDisplay';\nimport DiedDateDisplay from './DiedDateDisplay';\nimport InfoDisplay from './InfoDisplay';\nimport GraveyardTypeDisplay from './GraveyardTypeDisplay';\nimport DemarcationDisplay from './DemarcationDisplay';\nimport FootstoneDisplay from './FootstoneDisplay';\nimport NotesDisplay from './NotesDisplay';\nimport ParcelNumberDisplay from './ParcelNumberDisplay';\nimport PaginatedTable from './PaginatedTable';\nimport IntermentSort from '../models/IntermentSort';\nimport Column from '../models/Column';\n\nconst filterColumns = (enabledColumnNames, relevantColumns) => {\n  return relevantColumns.filter(column => enabledColumnNames.includes(column.accessor));\n};\n\nconst IntermentList = ({ enabledColumns }) => {\n  const data = useMemo(() => {\n    const interments = NashvilleCemeteries.map(interment => new Interment(interment));\n    interments.sort(IntermentSort);\n    return interments;\n  }, []);\n  const defaultColumn = useMemo(() => ({ Filter: TextFilter }), []);\n\n  const nameColumn = { Header: Column.names.person, accessor: 'person', filter: 'fuzzyText', Cell: NameDisplay };\n  const deathDateColumn = { Header: Column.names.deathDate, accessor: 'deathDate', Cell: DiedDateDisplay };\n  const deceasedInfoColumn = { Header: Column.names.deceasedInfo, accessor: 'deceasedInfo', Cell: InfoDisplay, filter: 'fuzzyText' };\n  const personColumnGroup = {\n    Header: 'Person',\n    columns: filterColumns(enabledColumns, [nameColumn, deathDateColumn, deceasedInfoColumn])\n  };\n\n  const cemeteryColumn = { Header: Column.names.cemeteryName, accessor: 'cemeteryName', filter: 'includes',\n    Filter: SelectColumnFilter, Cell: NameDisplay };\n  const addressColumn = { Header: Column.names.address, accessor: 'address', Cell: AddressDisplay,\n    filter: 'fuzzyText' };\n  const graveyardTypeColumn = { Header: Column.names.graveyardType, accessor: 'graveyardType', filter: 'includes',\n    Filter: SelectColumnFilter, Cell: GraveyardTypeDisplay };\n  const siteHistoryColumn = { Header: Column.names.siteHistory, accessor: 'siteHistory', Cell: InfoDisplay };\n  const locationColumnGroup = {\n    Header: 'Location',\n    columns: filterColumns(enabledColumns, [cemeteryColumn, addressColumn, graveyardTypeColumn, siteHistoryColumn])\n  };\n\n  const inscriptionColumn = { Header: Column.names.inscription, accessor: 'inscription', Cell: InscriptionDisplay };\n  const footstoneColumn = { Header: Column.names.footstone, accessor: 'footstone', Cell: FootstoneDisplay };\n  const demarcationColumn = { Header: Column.names.demarcation, accessor: 'demarcation', Cell: DemarcationDisplay };\n  const conditionColumn = { Header: Column.names.condition, accessor: 'condition', Cell: DemarcationDisplay };\n  const accessibleColumn = { Header: Column.names.accessible, accessor: 'accessible', filter: 'includes',\n    Filter: SelectColumnFilter };\n  const restorationColumn = { Header: Column.names.restoration, accessor: 'restoration', Cell: LongTextBlock };\n  const photosColumn = { Header: Column.names.gravePhotos, accessor: 'gravePhotos', Cell: PhotoList };\n  const markerColumnGroup = {\n    Header: 'Marker/Plot',\n    columns: filterColumns(enabledColumns, [inscriptionColumn, footstoneColumn, demarcationColumn, conditionColumn,\n      accessibleColumn, restorationColumn, photosColumn])\n  };\n\n  const notesColumn = { Header: Column.names.notes, accessor: 'notes', Cell: NotesDisplay };\n  const otherColumnGroup = { Header: '', id: 'other', columns: filterColumns(enabledColumns, [notesColumn]) };\n\n  const tractParcelNumberColumn = { Header: Column.names.tractParcelNumber, accessor: 'tractParcelNumber', Cell: ParcelNumberDisplay };\n  const cemeteryParcelNumberColumn = { Header: Column.names.cemeteryParcelNumber, accessor: 'cemeteryParcelNumber',\n    Cell: ParcelNumberDisplay };\n  const parcelNumberColumnGroup = {\n    Header: 'Parcel Numbers',\n    columns: filterColumns(enabledColumns, [tractParcelNumberColumn, cemeteryParcelNumberColumn])\n  };\n\n  const originalSurveyColumn = { Header: Column.names.originalSurvey, accessor: 'originalSurvey',\n    Cell: DateCellFormatter };\n  const surveyUpdatesColumn = { Header: Column.names.surveyUpdates, accessor: 'surveyUpdates',\n    Cell: DateCellFormatter };\n  const currentSurveyColumn = { Header: Column.names.currentSurvey, accessor: 'currentSurvey',\n    Cell: DateCellFormatter };\n  const surveyColumnGroup = {\n    Header: 'Survey',\n    columns: filterColumns(enabledColumns, [originalSurveyColumn, surveyUpdatesColumn, currentSurveyColumn])\n  };\n\n  const columns = useMemo(() => {\n    return [personColumnGroup, locationColumnGroup, markerColumnGroup, otherColumnGroup, parcelNumberColumnGroup,\n      surveyColumnGroup];\n  }, [enabledColumns]);\n\n  return <PaginatedTable data={data} columns={columns} pageSize={10} defaultColumn={defaultColumn} />;\n};\n\nexport default IntermentList;\n","import React from 'react';\nimport { Box, FormGroup } from '@primer/components';\n\nconst ColumnOption = ({ name, value, isEnabled, onToggle }) => {\n  const domID = `enabledColumns_${value}`;\n  return (\n    <FormGroup display=\"inline-block\" my={0} mr={3}>\n      <FormGroup.Label fontWeight=\"normal\" htmlFor={domID} mb={1}>\n        <input\n          type=\"checkbox\"\n          checked={isEnabled}\n          name=\"enabledColumns\"\n          value={value}\n          id={domID}\n          onChange={e => onToggle(value, e.target.checked)}\n        />\n        <Box as=\"span\" display=\"inline-block\" ml={1}>{name}</Box>\n      </FormGroup.Label>\n    </FormGroup>\n  );\n};\n\nexport default ColumnOption;\n","import React from 'react';\nimport { Box, Heading } from '@primer/components';\nimport ColumnOption from './ColumnOption';\nimport Column from '../models/Column';\n\nconst ColumnGroupOptions = ({ groupName, enabledColumns, columnValues, onColumnToggle }) => {\n  return (\n    <Box mb={3}>\n      {groupName && groupName.trim().length > 0 && <Heading fontSize={1} mb={2}>{groupName}</Heading>}\n      {columnValues.map(value => <ColumnOption\n        key={`${groupName}-${value}`}\n        name={Column.names[value]}\n        value={value}\n        isEnabled={enabledColumns.includes(value)}\n        onToggle={onColumnToggle}\n      />)}\n    </Box>\n  );\n};\n\nexport default ColumnGroupOptions;\n","const localStorageKey = 'nash-grave-plot';\n\nclass LocalStorage {\n  static getJSON() {\n    if (!window.localStorage) {\n      console.error('browser does not support local storage');\n      return {};\n    }\n\n    const appData = window.localStorage.getItem(localStorageKey) || \"{}\";\n    return JSON.parse(appData);\n  }\n\n  static get(key) {\n    const appData = this.getJSON();\n    return appData[key];\n  }\n\n  static set(key, value) {\n    const appData = this.getJSON();\n    appData[key] = value;\n    window.localStorage.setItem(localStorageKey, JSON.stringify(appData));\n  }\n\n  static delete(key) {\n    const appData = this.getJSON();\n    delete appData[key];\n    window.localStorage.setItem(localStorageKey, JSON.stringify(appData));\n  }\n}\n\nexport default LocalStorage;\n","import React, { useState } from 'react';\nimport { Box, ButtonInvisible, Dialog, StyledOcticon, Text } from '@primer/components';\nimport { GearIcon } from '@primer/octicons-react';\nimport ColumnGroupOptions from './ColumnGroupOptions';\nimport Column from '../models/Column';\nimport LocalStorage from '../models/LocalStorage';\n\nconst getEnabledColumns = (enabledColumns, columnValue, isEnabled) => {\n  if (isEnabled) {\n    return [...enabledColumns, columnValue];\n  }\n  return enabledColumns.filter(c => c !== columnValue);\n};\n\nconst Settings = ({ enabledColumns, setEnabledColumns }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <>\n      <ButtonInvisible onClick={() => setIsOpen(true)} title=\"Settings\" aria-label=\"Settings\">\n        <StyledOcticon icon={GearIcon} size={16} color=\"white\" />\n      </ButtonInvisible>\n      <Dialog\n        isOpen={isOpen}\n        onDismiss={() => setIsOpen(false)}\n        aria-labelledby=\"header-id\"\n      >\n        <Dialog.Header id=\"header-id\">Settings</Dialog.Header>\n        <Box p={3} sx={{ overflow: 'auto', maxHeight: '70vh' }}>\n          <Text color=\"black\" as=\"div\">\n            <Box mt={0} mb={3} as=\"p\">Choose which columns to show:</Box>\n            {Object.keys(Column.groups).map(groupName => <ColumnGroupOptions\n              key={groupName}\n              groupName={groupName}\n              columnValues={Column.groups[groupName]}\n              enabledColumns={enabledColumns}\n              onColumnToggle={(columnValue, isEnabled) => {\n                const newEnabledColumns = getEnabledColumns(enabledColumns, columnValue, isEnabled);\n                LocalStorage.set('enabledColumns', newEnabledColumns);\n                setEnabledColumns(newEnabledColumns);\n              }}\n            />)}\n          </Text>\n        </Box>\n      </Dialog>\n    </>\n  );\n};\n\nexport default Settings;\n","import React from 'react';\nimport { Box, Link } from '@primer/components';\n\nconst Footer = () => {\n  return (\n    <Box\n      mt={4}\n      p={4}\n      textAlign=\"center\"\n      borderTopWidth={1}\n      borderColor=\"border.default\"\n      borderTopStyle=\"solid\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Link\n        target=\"_blank\"\n        display=\"inline-block\"\n        mr={4}\n        muted={true}\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/cheshire137/nash-grave-plot\"\n      >View source</Link>\n      <span>\n        Data from <Link\n          target=\"_blank\"\n          muted={true}\n          rel=\"noopener noreferrer\"\n          href=\"https://data.nashville.gov/Geneology/Davidson-County-Cemetery-Survey/ttqg-mpiz\"\n        >Davidson County Cemetery Survey</Link>\n      </span>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport { BaseStyles, Box, Header, Heading, ThemeProvider } from '@primer/components';\nimport IntermentList from './components/IntermentList';\nimport Settings from './components/Settings';\nimport Column from './models/Column';\nimport LocalStorage from './models/LocalStorage';\nimport Footer from './components/Footer';\n\nconst App = () => {\n  const savedEnabledColumns = LocalStorage.get('enabledColumns');\n  const [enabledColumns, setEnabledColumns] = useState(savedEnabledColumns || Column.defaultColumns);\n  return (\n    <ThemeProvider>\n      <BaseStyles>\n        <Header>\n          <Header.Item full>\n            <Heading as=\"h1\">NashGravePlot</Heading>\n          </Header.Item>\n          <Header.Item>\n            <Settings enabledColumns={enabledColumns} setEnabledColumns={setEnabledColumns} />\n          </Header.Item>\n        </Header>\n        <Box pb={4}>\n          <IntermentList enabledColumns={enabledColumns} />\n        </Box>\n        <Footer />\n      </BaseStyles>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}